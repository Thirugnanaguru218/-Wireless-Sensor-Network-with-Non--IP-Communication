CCS PCM C Compiler, Version 5.008, 5967               18-Sep-24 22:32

               Filename:   C:\Users\computer\Desktop\New folder (2)\main1.lst

               ROM used:   504 words (6%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           21 (6%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1C1
0003:  NOP
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA D3,3B
000D:  DATA 69,3A
000E:  DATA 63,34
000F:  DATA A0,29
0010:  DATA F4,30
0011:  DATA F4,3A
0012:  DATA 73,1D
0013:  DATA 00,00
0014:  DATA D3,3B
0015:  DATA 69,3A
0016:  DATA 63,34
0017:  DATA A0,29
0018:  DATA F4,30
0019:  DATA F4,3A
001A:  DATA 73,1D
001B:  DATA 00,00
*
0174:  MOVF   0B,W
0175:  MOVWF  22
0176:  BCF    0B.7
0177:  BSF    03.5
0178:  BSF    03.6
0179:  BSF    0C.7
017A:  BSF    0C.0
017B:  NOP
017C:  NOP
017D:  BCF    03.5
017E:  MOVF   0C,W
017F:  ANDLW  7F
0180:  BTFSC  03.2
0181:  GOTO   1BB
0182:  BCF    03.6
0183:  MOVWF  23
0184:  BSF    03.6
0185:  MOVF   0D,W
0186:  BCF    03.6
0187:  MOVWF  24
0188:  BSF    03.6
0189:  MOVF   0F,W
018A:  BCF    03.6
018B:  MOVWF  25
018C:  MOVF   23,W
018D:  MOVWF  26
018E:  CALL   104
018F:  MOVF   24,W
0190:  BSF    03.6
0191:  MOVWF  0D
0192:  BCF    03.6
0193:  MOVF   25,W
0194:  BSF    03.6
0195:  MOVWF  0F
0196:  BSF    03.5
0197:  BSF    0C.7
0198:  BSF    0C.0
0199:  NOP
019A:  NOP
019B:  BCF    03.5
019C:  RLF    0C,W
019D:  RLF    0E,W
019E:  ANDLW  7F
019F:  BTFSC  03.2
01A0:  GOTO   1BB
01A1:  BCF    03.6
01A2:  MOVWF  23
01A3:  BSF    03.6
01A4:  MOVF   0D,W
01A5:  BCF    03.6
01A6:  MOVWF  24
01A7:  BSF    03.6
01A8:  MOVF   0F,W
01A9:  BCF    03.6
01AA:  MOVWF  25
01AB:  MOVF   23,W
01AC:  MOVWF  26
01AD:  CALL   104
01AE:  MOVF   24,W
01AF:  BSF    03.6
01B0:  MOVWF  0D
01B1:  BCF    03.6
01B2:  MOVF   25,W
01B3:  BSF    03.6
01B4:  MOVWF  0F
01B5:  INCF   0D,F
01B6:  BTFSC  03.2
01B7:  INCF   0F,F
01B8:  BCF    03.6
01B9:  GOTO   177
01BA:  BSF    03.6
01BB:  BCF    03.6
01BC:  BTFSC  22.7
01BD:  BSF    0B.7
01BE:  BCF    0A.3
01BF:  BCF    0A.4
01C0:  GOTO   1EB (RETURN)
....................  
.................... #list 
....................  
.................... #fuses HS, NOWDT, NOPUT, NOLVP, NOCPD, NOPROTECT 
.................... #use delay(clock=40000000)  // Set to your clock frequency 
*
001C:  MOVLW  27
001D:  MOVWF  04
001E:  BCF    03.7
001F:  MOVF   00,W
0020:  BTFSC  03.2
0021:  GOTO   030
0022:  MOVLW  0C
0023:  MOVWF  78
0024:  CLRF   77
0025:  DECFSZ 77,F
0026:  GOTO   025
0027:  DECFSZ 78,F
0028:  GOTO   024
0029:  MOVLW  F7
002A:  MOVWF  77
002B:  DECFSZ 77,F
002C:  GOTO   02B
002D:  GOTO   02E
002E:  DECFSZ 00,F
002F:  GOTO   022
0030:  RETURN
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7)  // Configure UART 
....................  
.................... // LCD module connections 
.................... #define LCD_ENABLE_PIN PIN_D2 
.................... #define LCD_RS_PIN PIN_D0 
.................... #define LCD_RW_PIN PIN_D1 
.................... #define LCD_DATA4 PIN_D4 
.................... #define LCD_DATA5 PIN_D5 
.................... #define LCD_DATA6 PIN_D6 
.................... #define LCD_DATA7 PIN_D7 
....................  
.................... #include <lcd.c>  // Include the LCD driver 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0099:  BSF    08.4
....................    output_float(LCD_DATA5); 
009A:  BSF    08.5
....................    output_float(LCD_DATA6); 
009B:  BSF    08.6
....................    output_float(LCD_DATA7); 
009C:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
009D:  BCF    03.5
009E:  BSF    08.1
009F:  BSF    03.5
00A0:  BCF    08.1
....................    delay_cycles(1); 
00A1:  NOP
....................    lcd_output_enable(1); 
00A2:  BCF    03.5
00A3:  BSF    08.2
00A4:  BSF    03.5
00A5:  BCF    08.2
....................    delay_cycles(1); 
00A6:  NOP
....................    high = lcd_read_nibble(); 
00A7:  BCF    03.5
00A8:  CALL   060
00A9:  MOVF   78,W
00AA:  MOVWF  2E
....................        
....................    lcd_output_enable(0); 
00AB:  BCF    08.2
00AC:  BSF    03.5
00AD:  BCF    08.2
....................    delay_cycles(1); 
00AE:  NOP
....................    lcd_output_enable(1); 
00AF:  BCF    03.5
00B0:  BSF    08.2
00B1:  BSF    03.5
00B2:  BCF    08.2
....................    delay_us(1); 
00B3:  MOVLW  02
00B4:  MOVWF  77
00B5:  DECFSZ 77,F
00B6:  GOTO   0B5
00B7:  GOTO   0B8
00B8:  NOP
....................    low = lcd_read_nibble(); 
00B9:  BCF    03.5
00BA:  CALL   060
00BB:  MOVF   78,W
00BC:  MOVWF  2D
....................        
....................    lcd_output_enable(0); 
00BD:  BCF    08.2
00BE:  BSF    03.5
00BF:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00C0:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00C1:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00C2:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00C3:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00C4:  BCF    03.5
00C5:  SWAPF  2E,W
00C6:  MOVWF  77
00C7:  MOVLW  F0
00C8:  ANDWF  77,F
00C9:  MOVF   77,W
00CA:  IORWF  2D,W
00CB:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0060:  CLRF   2F
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0061:  BSF    03.5
0062:  BSF    08.4
0063:  MOVLW  00
0064:  BCF    03.5
0065:  BTFSC  08.4
0066:  MOVLW  01
0067:  IORWF  2F,F
....................    n |= input(LCD_DATA5) << 1; 
0068:  BSF    03.5
0069:  BSF    08.5
006A:  MOVLW  00
006B:  BCF    03.5
006C:  BTFSC  08.5
006D:  MOVLW  01
006E:  MOVWF  77
006F:  BCF    03.0
0070:  RLF    77,F
0071:  MOVF   77,W
0072:  IORWF  2F,F
....................    n |= input(LCD_DATA6) << 2; 
0073:  BSF    03.5
0074:  BSF    08.6
0075:  MOVLW  00
0076:  BCF    03.5
0077:  BTFSC  08.6
0078:  MOVLW  01
0079:  MOVWF  77
007A:  RLF    77,F
007B:  RLF    77,F
007C:  MOVLW  FC
007D:  ANDWF  77,F
007E:  MOVF   77,W
007F:  IORWF  2F,F
....................    n |= input(LCD_DATA7) << 3; 
0080:  BSF    03.5
0081:  BSF    08.7
0082:  MOVLW  00
0083:  BCF    03.5
0084:  BTFSC  08.7
0085:  MOVLW  01
0086:  MOVWF  77
0087:  RLF    77,F
0088:  RLF    77,F
0089:  RLF    77,F
008A:  MOVLW  F8
008B:  ANDWF  77,F
008C:  MOVF   77,W
008D:  IORWF  2F,F
....................     
....................    return(n); 
008E:  MOVF   2F,W
008F:  MOVWF  78
....................   #else 
0090:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0031:  BTFSC  2E.0
0032:  GOTO   035
0033:  BCF    08.4
0034:  GOTO   036
0035:  BSF    08.4
0036:  BSF    03.5
0037:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0038:  BCF    03.5
0039:  BTFSC  2E.1
003A:  GOTO   03D
003B:  BCF    08.5
003C:  GOTO   03E
003D:  BSF    08.5
003E:  BSF    03.5
003F:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0040:  BCF    03.5
0041:  BTFSC  2E.2
0042:  GOTO   045
0043:  BCF    08.6
0044:  GOTO   046
0045:  BSF    08.6
0046:  BSF    03.5
0047:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0048:  BCF    03.5
0049:  BTFSC  2E.3
004A:  GOTO   04D
004B:  BCF    08.7
004C:  GOTO   04E
004D:  BSF    08.7
004E:  BSF    03.5
004F:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0050:  NOP
....................    lcd_output_enable(1); 
0051:  BCF    03.5
0052:  BSF    08.2
0053:  BSF    03.5
0054:  BCF    08.2
....................    delay_us(2); 
0055:  MOVLW  06
0056:  MOVWF  77
0057:  DECFSZ 77,F
0058:  GOTO   057
0059:  NOP
....................    lcd_output_enable(0); 
005A:  BCF    03.5
005B:  BCF    08.2
005C:  BSF    03.5
005D:  BCF    08.2
005E:  BCF    03.5
005F:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0091:  BSF    03.5
0092:  BCF    08.2
....................    lcd_rs_tris(); 
0093:  BCF    08.0
....................    lcd_rw_tris(); 
0094:  BCF    08.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0095:  BCF    03.5
0096:  BCF    08.0
0097:  BSF    03.5
0098:  BCF    08.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00CC:  MOVF   78,W
00CD:  MOVWF  2D
00CE:  BTFSS  2D.7
00CF:  GOTO   0D2
00D0:  BSF    03.5
00D1:  GOTO   099
....................    lcd_output_rs(address); 
00D2:  MOVF   2B,F
00D3:  BTFSS  03.2
00D4:  GOTO   0D7
00D5:  BCF    08.0
00D6:  GOTO   0D8
00D7:  BSF    08.0
00D8:  BSF    03.5
00D9:  BCF    08.0
....................    delay_cycles(1); 
00DA:  NOP
....................    lcd_output_rw(0); 
00DB:  BCF    03.5
00DC:  BCF    08.1
00DD:  BSF    03.5
00DE:  BCF    08.1
....................    delay_cycles(1); 
00DF:  NOP
....................    lcd_output_enable(0); 
00E0:  BCF    03.5
00E1:  BCF    08.2
00E2:  BSF    03.5
00E3:  BCF    08.2
....................    lcd_send_nibble(n >> 4); 
00E4:  BCF    03.5
00E5:  SWAPF  2C,W
00E6:  MOVWF  2D
00E7:  MOVLW  0F
00E8:  ANDWF  2D,F
00E9:  MOVF   2D,W
00EA:  MOVWF  2E
00EB:  CALL   031
....................    lcd_send_nibble(n & 0xf); 
00EC:  MOVF   2C,W
00ED:  ANDLW  0F
00EE:  MOVWF  2D
00EF:  MOVWF  2E
00F0:  CALL   031
00F1:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
*
0130:  BSF    03.5
0131:  BCF    08.4
....................    output_drive(LCD_DATA5); 
0132:  BCF    08.5
....................    output_drive(LCD_DATA6); 
0133:  BCF    08.6
....................    output_drive(LCD_DATA7); 
0134:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0135:  BCF    08.2
....................    lcd_rs_tris(); 
0136:  BCF    08.0
....................    lcd_rw_tris(); 
0137:  BCF    08.1
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0138:  BCF    03.5
0139:  BCF    08.0
013A:  BSF    03.5
013B:  BCF    08.0
....................    lcd_output_rw(0); 
013C:  BCF    03.5
013D:  BCF    08.1
013E:  BSF    03.5
013F:  BCF    08.1
....................    lcd_output_enable(0); 
0140:  BCF    03.5
0141:  BCF    08.2
0142:  BSF    03.5
0143:  BCF    08.2
....................      
....................    delay_ms(15); 
0144:  MOVLW  0F
0145:  BCF    03.5
0146:  MOVWF  27
0147:  CALL   01C
....................    for(i=1;i<=3;++i) 
0148:  MOVLW  01
0149:  MOVWF  22
014A:  MOVF   22,W
014B:  SUBLW  03
014C:  BTFSS  03.0
014D:  GOTO   156
....................    { 
....................        lcd_send_nibble(3); 
014E:  MOVLW  03
014F:  MOVWF  2E
0150:  CALL   031
....................        delay_ms(5); 
0151:  MOVLW  05
0152:  MOVWF  27
0153:  CALL   01C
0154:  INCF   22,F
0155:  GOTO   14A
....................    } 
....................     
....................    lcd_send_nibble(2); 
0156:  MOVLW  02
0157:  MOVWF  2E
0158:  CALL   031
....................    delay_ms(5); 
0159:  MOVLW  05
015A:  MOVWF  27
015B:  CALL   01C
....................    for(i=0;i<=3;++i) 
015C:  CLRF   22
015D:  MOVF   22,W
015E:  SUBLW  03
015F:  BTFSS  03.0
0160:  GOTO   16A
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0161:  MOVF   22,W
0162:  CALL   004
0163:  MOVWF  23
0164:  CLRF   2B
0165:  MOVF   23,W
0166:  MOVWF  2C
0167:  CALL   091
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0168:  INCF   22,F
0169:  GOTO   15D
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
00F2:  DECFSZ 28,W
00F3:  GOTO   0F5
00F4:  GOTO   0F8
....................       address=LCD_LINE_TWO; 
00F5:  MOVLW  40
00F6:  MOVWF  29
00F7:  GOTO   0F9
....................    else 
....................       address=0; 
00F8:  CLRF   29
....................       
....................    address+=x-1; 
00F9:  MOVLW  01
00FA:  SUBWF  27,W
00FB:  ADDWF  29,F
....................    lcd_send_byte(0,0x80|address); 
00FC:  MOVF   29,W
00FD:  IORLW  80
00FE:  MOVWF  2A
00FF:  CLRF   2B
0100:  MOVF   2A,W
0101:  MOVWF  2C
0102:  CALL   091
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0103:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0104:  MOVF   26,W
0105:  XORLW  07
0106:  BTFSC  03.2
0107:  GOTO   112
0108:  XORLW  0B
0109:  BTFSC  03.2
010A:  GOTO   117
010B:  XORLW  06
010C:  BTFSC  03.2
010D:  GOTO   11F
010E:  XORLW  02
010F:  BTFSC  03.2
0110:  GOTO   125
0111:  GOTO   12A
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0112:  MOVLW  01
0113:  MOVWF  27
0114:  MOVWF  28
0115:  CALL   0F2
0116:  GOTO   12F
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0117:  CLRF   2B
0118:  MOVLW  01
0119:  MOVWF  2C
011A:  CALL   091
....................                      delay_ms(2); 
011B:  MOVLW  02
011C:  MOVWF  27
011D:  CALL   01C
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
011E:  GOTO   12F
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
011F:  MOVLW  01
0120:  MOVWF  27
0121:  MOVLW  02
0122:  MOVWF  28
0123:  CALL   0F2
0124:  GOTO   12F
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0125:  CLRF   2B
0126:  MOVLW  10
0127:  MOVWF  2C
0128:  CALL   091
0129:  GOTO   12F
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
012A:  MOVLW  01
012B:  MOVWF  2B
012C:  MOVF   26,W
012D:  MOVWF  2C
012E:  CALL   091
....................      #endif 
....................    } 
012F:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... // Function to initialize the LCD 
.................... void initialize_LCD() { 
....................    lcd_init();            // Initialize LCD 
....................    lcd_putc('\f');        // Clear the screen 
*
016A:  MOVLW  0C
016B:  MOVWF  26
016C:  CALL   104
....................    lcd_gotoxy(1, 1);      // Set cursor to first line 
016D:  MOVLW  01
016E:  MOVWF  27
016F:  MOVWF  28
0170:  CALL   0F2
0171:  BCF    0A.3
0172:  BCF    0A.4
0173:  GOTO   1DA (RETURN)
.................... } 
....................  
.................... // Function to display a character on the LCD 
.................... void display_char(char c) { 
....................    lcd_gotoxy(1, 1);      // Set cursor to first line 
....................    lcd_putc("Switch Status:"); // Print label 
....................    lcd_gotoxy(1, 2);      // Set cursor to second line 
....................    lcd_putc(c);           // Display the received character 
.................... } 
....................  
.................... void main() { 
*
01C1:  MOVF   03,W
01C2:  ANDLW  1F
01C3:  MOVWF  03
01C4:  MOVLW  40
01C5:  BSF    03.5
01C6:  MOVWF  19
01C7:  MOVLW  A2
01C8:  MOVWF  18
01C9:  MOVLW  90
01CA:  BCF    03.5
01CB:  MOVWF  18
01CC:  BSF    03.5
01CD:  BSF    1F.0
01CE:  BSF    1F.1
01CF:  BSF    1F.2
01D0:  BCF    1F.3
01D1:  MOVLW  07
01D2:  MOVWF  1C
01D3:  BCF    03.7
....................    char received_char; 
....................  
....................    set_tris_b(0xFF);  // Set PORTB as input (for UART communication) 
01D4:  MOVLW  FF
01D5:  MOVWF  06
....................    set_tris_d(0x00);  // Set PORTD as output for LCD 
01D6:  MOVLW  00
01D7:  MOVWF  08
....................  
....................    initialize_LCD();  // Initialize the LCD 
01D8:  BCF    03.5
01D9:  GOTO   130
....................  
....................    while(TRUE) { 
....................       if (kbhit()) { // Check if there is data in the RX buffer 
01DA:  BTFSS  0C.5
01DB:  GOTO   1F3
....................          received_char = getc();  // Read received character 
01DC:  BTFSS  0C.5
01DD:  GOTO   1DC
01DE:  MOVF   1A,W
01DF:  MOVWF  21
....................           
....................          lcd_gotoxy(1, 1);  // Set cursor to first line 
01E0:  MOVLW  01
01E1:  MOVWF  27
01E2:  MOVWF  28
01E3:  CALL   0F2
....................          lcd_putc("Switch Status:"); // Print label 
01E4:  MOVLW  14
01E5:  BSF    03.6
01E6:  MOVWF  0D
01E7:  MOVLW  00
01E8:  MOVWF  0F
01E9:  BCF    03.6
01EA:  GOTO   174
....................          lcd_gotoxy(1, 2);  // Set cursor to second line 
01EB:  MOVLW  01
01EC:  MOVWF  27
01ED:  MOVLW  02
01EE:  MOVWF  28
01EF:  CALL   0F2
....................          lcd_putc(received_char);  // Display received status 
01F0:  MOVF   21,W
01F1:  MOVWF  26
01F2:  CALL   104
....................       } 
....................        
....................       delay_ms(100); // Small delay to prevent overloading the CPU 
01F3:  MOVLW  64
01F4:  MOVWF  27
01F5:  CALL   01C
01F6:  GOTO   1DA
....................    } 
.................... } 
....................  
01F7:  SLEEP

Configuration Fuses:
   Word  1: 3F7A   HS NOWDT NOPUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
